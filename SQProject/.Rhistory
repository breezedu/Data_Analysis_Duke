ir1 <- IRanges(start = c(1, 3, 5), width = 1)
ir2 <- IRanges(start = c(4, 5, 6), width = 1)
union(ir1, ir2)
intersect(ir1, ir2)
x <- 1:10
names(x) <- letters[1:10]
class(x)
x[1:3]
x[c("a", "b")]
## ----uNames--------------------------------------------------------------
x <- 1:3
names(x) <- c("A", "A", "B")
x
x["A"]
## ----uNames2-------------------------------------------------------------
anyDuplicated(names(x))
names(x) <- c("A", "B", "C")
anyDuplicated(names(x))
## ----intNum--------------------------------------------------------------
x <- 1
class(x)
x <- 1:3
class(x)
## ----intNum2-------------------------------------------------------------
x <- 1L
class(x)
## ----machine-------------------------------------------------------------
.Machine$integer.max
2^31 -1 == .Machine$integer.max
round(.Machine$integer.max / 10^6, 1)
## ----matrices------------------------------------------------------------
x <- matrix(1:9, ncol = 3, nrow = 3)
rownames(x) <- c("A","B", "B")
x
dim(x)
nrow(x)
ncol(x)
## ----matrices2-----------------------------------------------------------
x[1:2,]
x["B",]
x[x >= 5]
## ----matrixSubset2-------------------------------------------------------
x[1,]
x[1,,drop=FALSE]
## ----createMatrix--------------------------------------------------------
matrix(1:9, 3, 3)
matrix(1:9, 3, 3, byrow = TRUE)
## ----list----------------------------------------------------------------
x <- list(1:3, letters[1:3], is.numeric)
x
names(x) <- c("numbers", "letters", "function")
x[1:2]
x[1]
x[[1]]
## ----list2---------------------------------------------------------------
x$letters
x["letters"]
x$let
x["let"]
## ----as.list-------------------------------------------------------------
biocLite()
library(BiocInstaller)
biocLite()
biocValid()
plotRanges(ir)
library(IRanges)
plotRanges(ir)
biocLite(c("IRanges"))
q()
library(BiocInstaller)
biocLite()
library(BiocInstaller)
biocLite
biocLite()
biocValid()
library(IRanges)
ir <- IRanges(start = c(1,3,7,9), end = c(4,4,8,10))
plotRanges <- function(x, xlim = x, main = deparse(substitute(x)),
col = "black", sep = 0.5, ...){
height <- 1
if (is(xlim, "Ranges"))
xlim <- c(min(start(xlim)), max(end(xlim)))
bins <- disjointBins(IRanges(start(x), end(x) + 1))
plot.new()
plot.window(xlim, c(0, max(bins) * (height + sep)))
ybottom <- bins * (sep + height) - height
rect(start(x) - 0.5, ybottom, end(x) + 0.5, ybottom + height, col = col, ...)
title(main)
axis(1)
}
)
plotRanges(ir)
plotRanges(reduce(ir))
plotRanges(ir)
ir1 <- IRanges(start = c(1, 3, 5), width = 1)
ir2 <- IRanges(start = c(4, 5, 6), width = 1)
union(ir1, ir2)
intersect(ir1, ir2)
## ----union2--------------------------------------------------------------
reduce(c(ir1, ir2))
## ----findOverlaps--------------------------------------------------------
ir1 <- IRanges(start = c(1,4,8), end = c(3,7,10))
ir2 <- IRanges(start = c(3,4), width = 3)
ov <- findOverlaps(ir1, ir2)
ov
## ----findOverlaps_ill----------------------------------------------------
intersect(ir1[subjectHits(ov)[1]],
ir2[queryHits(ov)[2]])
## ----subjectHits---------------------------------------------------------
queryHits(ov)
unique(queryHits(ov))
## ----argsFindOverlaps, tidy=TRUE-----------------------------------------
args(findOverlaps)
## ----countOverlaps-------------------------------------------------------
countOverlaps(ir1, ir2)
## ----nearest-------------------------------------------------------------
ir1
ir2
nearest(ir1, ir2)
## ----sessionInfo, echo=FALSE---------------------------------------------
sessionInfo()
q()
install.packages("BiocInstaller")
install.packages("BiocInstaller")
library(BiocInstaller)
biocLite()
dbinom(8, size = 10, p=0.13)
squre(1000*0.262 * (1-0.262))
sqt(100)
sqr(100)
sqrt(100)
sqrt(1000*0.262 * (1-0.262))
dbinom(70, size=245, p=0.25)
mean = 245*0.25
sd = sqrt(245*0.25*0.75)
mean
sd
z = (70-61.25)/6.78
z
sum(dbinom(70:245, size = 245, p =0.25))
sum(dbinom(71:245, size = 245, p =0.25))
dbinom(6, size = 10, p=0.56)
dbinom(2, size = 10, p=0.56)
dbinom(600, size = 1000, p=0.56)
sum(dbinom(60:100, size = 100, p=0.56))
sum(dbinom(50:160, size = 160, p=0.28))
sum(dbinom(51:160, size = 160, p=0.28))
load(url("http://www.openintro.org/stat/data/kobe.RData"))
head(kobe)
names(kobe)
kobe$basket
kobe_streak <- calc_streak(kobe$basket)
barplot(table(kobe_streak))
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 10, replace = TRUE)
sample(outcomes, size = 10, replace = TRUE)
sample(outcomes, size = 10, replace = TRUE)
sample(outcomes, size = 10, replace = FASLE)
sample(outcomes, size = 10, replace = FALSE)
sample(outcomes, size = 1, replace = FALSE)
sample(outcomes, size = 2, replace = FALSE)
sample(outcomes, size = 3, replace = FALSE)
sample(outcomes, size = 10, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
kobe$basket
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 133, replace = TRUE)
sim_basket
calc_streak(sim_basket)
barplot(table(calc_streak((sim_basket))))
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob = c(0.45, 0.55))
sim_basket
barplot(table(sim_basket))
barplot(table(calc_streak(sim_basket)))
boxplot(table(kobe$basket))
table(kobe$basket)
boxplot(table(calc_streak(kobe$basket)))
table(calc_streak(kobe$basket))
boxplot(table(calc_streak(kobe$basket)))
boxplot(calc_streak(kobe$basket))
load(url("http://www.openintro.org/stat/data/ames.RData"))
area <- ames$Gr.Liv.Area
price <- ames$SalePrice
area
price
summary(area)
t_area <- table(summary(area))
t_area
barplot(summary(area))
barplot(t_area)
barplot(table(area))
boxplot(table(area))
hist(area)
samp0 <- sample(area, 50)
samp0
samp1 <- sample(area, 50)
samp1
table(samp1)
hist(samp1)
hist(samp0)
mean(samp1)
mean(samp0)
sample_means50 <- rep(NA, 5000)
sample_means50
for(i in 1:5000){
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
sample_means50
hist(sample_means50)
hist(sample_means50, breaks = 25)
sample_means10 <- rep(NA, 5000)
sample_means100 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(area, 10)
sample_means10[i] <- mean(samp)
samp <- sample(area, 100)
sample_means100[i] <- mean(samp)
}
## plot figures together:
par(mfrow = c(3, 1))
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
sample_means10 <- rep(NA, 5000)
sample_means50 <- rep(NA, 5000)
sample_means100 <- rep(NA, 5000)
for(i in 1:5000){
samp10 <- sample(area, 10)
sample_means10[i] <- mean(samp)
samp50 <- sample(area, 50)
sample_means50[i] <- mean(samp50)
samp100 <- sample(area, 100)
sample_means100[i] <- mean(samp)
}
## plot figures together:
par(mfrow = c(3, 1))
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
for(i in 1:5000){
samp10 <- sample(area, 10)
sample_means10[i] <- mean(samp10)
samp50 <- sample(area, 50)
sample_means50[i] <- mean(samp50)
samp100 <- sample(area, 100)
sample_means100[i] <- mean(samp100)
}
par(mfrow = c(3, 1))
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
summary(area)
hist(area)
par(mfrow = c(1, 1))
hist(area)
q()
require(ggplot2)
install.packages("ggplot2")
q()
install.packages("ggplot2")
require(ggplot2)
## sandwich
install.packages("sandwich")
require(sandwich)
## msm
install.packages("msm")
require(msm)
install.packages(qqplot)
library(qqplot)
lambda <- runif(1000,5,9)
X1 <- rpois(1000,mean(lambda))
X2 <- rpois(1000,lambda)
l.MR <- rep(log(mean(lambda)),1000)
fit <- glm(X1~offset(l.MR),family="poisson")
fit2 <- glm( X2~offset(l.MR), family = "poisson")
fit3 <- glm( X2~offset(log(lambda)), family = "poisson")   ## family = "poisson")
## cal the Intercept for fit
cov.fit <- vcovHC(fit, type = "HC0")
cov.fit <- vcovHC(fit, type="HC0")
std.err <- sqrt(diag(cov.fit))
r.est <- cbind(Estimate = coef(fit), "Robust SE" = std.err,
"Pr(>|z|)" = 2 * pnorm( abs( coef(fit)/std.err), lower.tail = FALSE),
LL = coef(fit) - 1.96 * std.err,
UL = coef(fit) + 1.96 * std.err)
r.est
##
with(fit, cbind(res.deviance = deviance, df = df.residual,
p = pchisq(deviance, df.residual, lower.tail=FALSE)))
fit_update <- update(fit2, . ~ . - X2)
##anova
anova(fit_update, fit, test = "Chisq")
## cal the Intercept for fit2
cov.fit2 <- vcovHC(fit2, type = "HC0")
cov.fit2 <- vcovHC(fit2, type="HC0")
std.err <- sqrt(diag(cov.fit2))
r2.est <- cbind(Estimate = coef(fit2), "Robust SE" = std.err,
"Pr(>|z|)" = 2 * pnorm( abs( coef(fit2)/std.err), lower.tail = FALSE),
LL = coef(fit2) - 1.96 * std.err,
UL = coef(fit2) + 1.96 * std.err)
r2.est
##
with(fit2, cbind(res.deviance = deviance, df = df.residual,
p = pchisq(deviance, df.residual, lower.tail=FALSE)))
##anova(fit2, fit, test = "Chisq")
anova(fit, test = "Chisq")
anova(fit2, test = "Chisq")
anova(fit3, test = "Chisq")
##drop1()
qqplot(fit)
plot(fit)
plot(fit2)
plot(fit3)
hist(fit)
qqline(fit3)
fit <- glm(X1~offset(l.MR),family="poisson", data = X1)
fit <- glm(X1~offset(l.MR),family="poisson")
plot(fit)
require(ggplot2)
require(sandwich)
require(msm)
lambda <- runif(1000,5,9)
age <- rnorm(1000, 35, 6)
# number of mutations (count) in gene_X
# here we try three different methods to generate mutations
X1 <- rpois(1000,mean(lambda))
X2 <- rpois(1000,lambda)
X3 <- rpois(1000, age)
# try two different offset(), see which one would fit well
l.MR <- rep(log(mean(lambda)),1000)
l2.MR <- log(lambda)
## fit mutations with different offsets
# fit X1 to two offsets
fitX1_mLamb <- glm(X1~offset(l.MR),family="poisson")
fitX1_Lamb <- glm(X1 ~ offset(l2.MR), family="poisson")
# fit X2 to two offsets
fitX2_mLamb <- glm( X2~offset(l.MR), family = "poisson")
fitX2_Lamb <- glm( X2~offset(l2.MR), family = "poisson")
# fit X3 to two offsets
fitX3_mLamb <- glm( X3~offset(l.MR), family = "poisson")   ## family = "poisson")
fitX3_Lamb <- glm( X3~offset(l2.MR), family = "poisson")   ## family = "poisson")
##fit4 <- glm( X3~offset(l.MR), family = "poisson")
##fit5 <- glm( X3~offset(l2.MR), family = "poisson")
## summary fit1 - fit5
summary(fitX1_mLamb)
summary(fitX1_Lamb)
summary(fitX2_mLamb)
summary(fitX2_Lamb)
summary(fitX3_mLamb)
summary(fitX3_Lamb)
## plot all fited models
# plot fitX1 to two offsets
par(mfrow=c(2,2))
plot(fitX1_mLamb)
par(mfrow=c(2,2))
plot(fitX1_Lamb)
# plot fit X2 to two offsets
par(mfrow=c(2,2))
plot(fitX2_mLamb)
par(mfrow=c(2,2))
plot(fitX2_Lamb)
# plot fit X3 to two offsets
par(mfrow=c(2,2))
plot(fitX3_mLamb)
par(mfrow=c(2,2))
plot(fitX3_Lamb)
setwd("D:/GitHub/Stats/Data_Analysis_Duke/SQProject")
table <- read.table("exon_level_process_v2.txt")
## assign column names
colnames(table) <- c("chr", "gene", "dom", "subdom", "exon", "gene.dom",
"gene.dom.subdom",
"envarp",    # pass
"envarpf",   # pass functional
"envarpfr",  # pass functional rare
"emutr")     # mutation rate
## attract data from the original table??
table<-within(table,envarpfc<-envarpf-envarpfr)#y
table<-within(table,gene<-factor(gene))
table<-within(table,gene.dom<-factor(gene.dom))
table<-within(table,gene.dom.subdom<-factor(gene.dom.subdom))
table<-table[1:100,]
#for the use of counting number of gene
sumenvarp<-aggregate(table$envarp, by=list(Category=table$gene), FUN=sum)
sumenvarpfc<-aggregate(table$envarpfc, by=list(Category=table$gene), FUN=sum)[,2]
## simplify table1
table1<-data.frame(cbind(sumenvarp,sumenvarpfc))
## assign column names to table1
colnames(table1)<-c("gene","sumenvarp","sumenvarpfc")
library("lme4")
install.packages("lme4")
table <- read.table("exon_level_process_v2.txt")
## assign column names
colnames(table) <- c("chr", "gene", "dom", "subdom", "exon", "gene.dom",
"gene.dom.subdom",
"envarp",    # pass
"envarpf",   # pass functional
"envarpfr",  # pass functional rare
"emutr")     # mutation rate
## attract data from the original table??
table<-within(table,envarpfc<-envarpf-envarpfr)#y
table<-within(table,gene<-factor(gene))
table<-within(table,gene.dom<-factor(gene.dom))
table<-within(table,gene.dom.subdom<-factor(gene.dom.subdom))
sumenvarp<-aggregate(table$envarp, by=list(Category=table$gene), FUN=sum)
sumenvarpfc<-aggregate(table$envarpfc, by=list(Category=table$gene), FUN=sum)[,2]
## simplify table1
table1<-data.frame(cbind(sumenvarp,sumenvarpfc))
## assign column names to table1
colnames(table1)<-c("gene","sumenvarp","sumenvarpfc")
library("lme4")
my.control = glmerControl(optCtrl = list(maxfun=20) )
## fit Poisson Regression
## envarpfc against (1|gene)
## offset envarp + 1
fitgene <- glmer(envarpfc~(1|gene)+envarp+1,data=table, family=poisson(link="log"),control = my.control)
install.packages("rstan")
library("rstan")
gene_code<-"
data{   #get the data we have
int <lower=0> N; #number of obs
int <lower=0> J; #number of gene level
int <lower=1,upper=J> gene[N];
vector[N] x;  #x
int <lower=0> y[N] ; #y
}
## parameters
parameters{ #specify the parameter we want to know
vector[J] a;  #random intercept when gene is the level
real <lower=0> sigma_a;  #variance of intercept
real <lower=0> sigma_epsilon; #variance of dispersion
real beta;    #common slope;
vector[N] epsilon_raw;
}
## transformed parameters
transformed parameters{ #specify the model we will use
vector[N] lambda;
vector[N] epsilon; #amount of dispersion
for (i in 1:N)
epsilon[i]<-sigma_epsilon*epsilon_raw[i];
for (i in 1:N)
lambda[i] <- beta*x[i]+a[gene[i]]+epsilon[i];#specify the group
}
model { #give the prior distribution
beta ~ normal(0,10);
a ~ normal(0, sigma_a);
epsilon_raw~normal(0,1);
y ~ poisson_log(lambda); #y and y_hat should have same type
}
"
N<-dim(table)[1]
J<-dim(table1)[1]
gene<-as.numeric(table$gene)
genelevel<-length(unique(gene))
index<-match(gene, unique(gene))
M1_table<-list(N=N, J=J, y=table$envarpfc,
x=table$envarp,gene=index)
fit1<-stan(model_code=gene_code, data=M1_table, iter=20, chains=4)
library("rstan")
##gene_code
gene_code<-"
data{   #get the data we have
int <lower=0> N; #number of obs
int <lower=0> J; #number of gene level
int <lower=1,upper=J> gene[N];
vector[N] x;  #x
int <lower=0> y[N] ; #y
}
## parameters
parameters{ #specify the parameter we want to know
vector[J] a;  #random intercept when gene is the level
real <lower=0> sigma_a;  #variance of intercept
real <lower=0> sigma_epsilon; #variance of dispersion
real beta;    #common slope;
vector[N] epsilon_raw;
}
## transformed parameters
transformed parameters{ #specify the model we will use
vector[N] lambda;
vector[N] epsilon; #amount of dispersion
for (i in 1:N)
epsilon[i]<-sigma_epsilon*epsilon_raw[i];
for (i in 1:N)
lambda[i] <- beta*x[i]+a[gene[i]]+epsilon[i];#specify the group
}
model { #give the prior distribution
beta ~ normal(0,10);
a ~ normal(0, sigma_a);
epsilon_raw~normal(0,1);
y ~ poisson_log(lambda); #y and y_hat should have same type
}
"
N<-dim(table)[1]
J<-dim(table1)[1]
gene<-as.numeric(table$gene)
genelevel<-length(unique(gene))
index<-match(gene, unique(gene))
M1_table<-list(N=N, J=J, y=table$envarpfc,
x=table$envarp,gene=index)
fit1<-stan(model_code=gene_code, data=M1_table, iter=20, chains=4)
Warning()
)
warnings()
q()
